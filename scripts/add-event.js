import fs from"fs";import path from"path";import{search,input}from"@inquirer/prompts";import{success,error}from"../common/utils/logger.js";import{Events}from"discord.js";async function generateEvent(){const doesSrcDirExist=fs.existsSync(path.join(process.cwd(),"src")),isSrcDir=process.cwd().endsWith("src");doesSrcDirExist||(isSrcDir?(error('You are in the "src/" directory. You should be in the root of your Discraft project.'),process.exit(1)):(error('The "src/" directory does not exist. Please run "discraft init" to initialize a project, or ensure you are in the root of your Discraft project.'),process.exit(1)));const eventConfig={name:"",type:""};try{if(eventConfig.name=await input({message:"Event name:",required:!0,validate:input=>!!/^[a-z]+(-[a-z]+)*$/.test(input)||"Must be lowercase with single dashes only."}),eventConfig.type=await search({message:"Event type:",required:!0,source:async input=>{const options=Object.keys(Events).map((key=>({name:key,value:key})));return input?options.filter((option=>option.name.toLowerCase().includes(input.toLowerCase()))).map((option=>({name:`${option.name}`,value:option.value}))):options}}),"custom"===eventConfig.type){const customEvent=await input({message:"Custom event name (from Discord.js Events):",required:!0,validate:input=>input.length>0});eventConfig.type=customEvent.customEventName}}catch(err){return"ExitPromptError"===err.name?(error("Cancelled by user."),process.exit(0)):(error("Error:",err),process.exit(1))}const eventsDir=path.join(process.cwd(),"src","events");fs.existsSync(eventsDir)||fs.mkdirSync(eventsDir,{recursive:!0});const eventPath=path.join(eventsDir,`${eventConfig.name}.js`),eventContent=`import { debug, error } from "../utils/logger.js";\nimport { Events } from "discord.js";\n\nexport default (client) => {\n    client.on(Events.${eventConfig.type}, (${"messageCreate"===eventConfig.type?"message":"event"}) => {\n        debug("'${eventConfig.name}' event triggered");\n        try {\n            // Add your event handling logic here\n            \n        } catch (err) {\n            error("Error in '${eventConfig.name}' event handler:", err);\n        }\n    });\n};\n`;try{return fs.writeFileSync(eventPath,eventContent),success(`Created event handler at src/events/${eventConfig.name}.js\nEvent will trigger on: ${eventConfig.type}`),{name:eventConfig.name}}catch(err){return error("Error creating event file:",err),process.exit(1)}}generateEvent().catch((err=>{error("Error creating event:",err),process.exit(1)}));