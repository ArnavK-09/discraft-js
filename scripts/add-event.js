import fs from"fs";import path from"path";import inquirer from"inquirer";import{success,error}from"../common/utils/logger.js";async function generateEvent(){const e=fs.existsSync(path.join(process.cwd(),"src")),r=process.cwd().endsWith("src");e||(r?(error('You are in the "src/" directory. You should be in the root of your Discraft project.'),process.exit(1)):(error('The "src/" directory does not exist. Please run "discraft init" to initialize a project, or ensure you are in the root of your Discraft project.'),process.exit(1)));let t={};try{if(t=await inquirer.prompt([{type:"input",name:"name",message:"Event name:",validate:e=>!!/^[a-z]+(-[a-z]+)*$/.test(e)||"Must be lowercase with single dashes only."},{type:"list",name:"eventType",message:"Event type:",choices:[{name:"Channel Create",value:"channelCreate"},{name:"Channel Delete",value:"channelDelete"},{name:"Channel Update",value:"channelUpdate"},{name:"Guild Member Add",value:"guildMemberAdd"},{name:"Guild Member Remove",value:"guildMemberRemove"},{name:"Message Create",value:"messageCreate"},{name:"Message Delete",value:"messageDelete"},{name:"Message Update",value:"messageUpdate"},{name:"Presence Update",value:"presenceUpdate"},{name:"Role Create",value:"roleCreate"},{name:"Role Delete",value:"roleDelete"},{name:"Role Update",value:"roleUpdate"},{name:"Voice State Update",value:"voiceStateUpdate"},{name:"Other Event",value:"custom"}]}]),"custom"===t.eventType){const e=await inquirer.prompt([{type:"input",name:"customEventName",message:"Custom event name (from Discord.js Events):",validate:e=>e.length>0}]);t.eventType=e.customEventName}}catch(e){return"ExitPromptError"===e.name?(error("Cancelled by user."),process.exit(0)):(error("Error:",e),process.exit(1))}const n=path.join(process.cwd(),"src","events");fs.existsSync(n)||fs.mkdirSync(n,{recursive:!0});const a=path.join(n,`${t.name}.js`),s=`import { debug, error } from "../utils/logger.js";\nimport { Events } from "discord.js";\n\nexport default (client) => {\n    client.on(Events.${t.eventType}, (${"messageCreate"===t.eventType?"message":"event"}) => {\n        debug("'${t.name}' event triggered");\n        try {\n            // Add your event handling logic here\n            \n        } catch (err) {\n            error("Error in '${t.name}' event handler:", err);\n        }\n    });\n};\n`;try{return fs.writeFileSync(a,s),success(`Created event handler at src/events/${t.name}.js\nEvent will trigger on: ${t.eventType}`),{name:t.name}}catch(e){return error("Error creating event file:",e),process.exit(1)}}generateEvent().catch((e=>{error("Error creating event:",e),process.exit(1)}));