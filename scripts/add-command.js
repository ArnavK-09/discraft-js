import fs from"fs";import path from"path";import inquirer from"inquirer";import{success,error}from"../common/utils/logger.js";async function generateCommand(){const e=fs.existsSync(path.join(process.cwd(),"src")),n=process.cwd().endsWith("src");e||(n?(error('You are in the "src/" directory. You should be in the root of your Discraft project.'),process.exit(1)):(error('The "src/" directory does not exist. Please run "discraft init" to initialize a project, or ensure you are in the root of your Discraft project.'),process.exit(1)));const a=await inquirer.prompt([{type:"input",name:"name",message:"Command name:",validate:e=>!!/^[a-z0-9-]+$/.test(e)||"Command name must be lowercase and may only contain letters, numbers, and dashes"},{type:"input",name:"description",message:"Command description:",validate:e=>e.length>0}]),s=await inquirer.prompt([{type:"checkbox",name:"features",message:"Select command features:",choices:[{name:"Enable response caching (improves performance for expensive operations)",value:"cacheable",checked:!1},{name:"Use deferred response (for commands that take longer than 3 seconds)",value:"deferred",checked:!1},{name:"Make responses ephemeral (only visible to the command user)",value:"ephemeral",checked:!1},{name:"Add permission requirements",value:"permissions",checked:!1}]}]);a.features=s.features;const t=[];if((await inquirer.prompt([{type:"confirm",name:"hasOptions",message:"Would you like to add command options/arguments? (e.g., /command <user> <reason>)",default:!1}])).hasOptions){console.log("\nLet's add some options to your command. For each option, you'll need to specify:"),console.log("1. The type of data it accepts (string, number, user, etc.)"),console.log('2. The name of the option (e.g., "user" in /ban <user>)'),console.log("3. A description of what the option does\n");let e=!0;for(;e;){const n=await inquirer.prompt([{type:"list",name:"type",message:"What type of data should this option accept?",choices:[{name:"String (text)",value:"String"},{name:"Integer (whole number)",value:"Integer"},{name:"Number (decimal number)",value:"Number"},{name:"Boolean (true/false)",value:"Boolean"},{name:"User (Discord user)",value:"User"},{name:"Channel (Discord channel)",value:"Channel"},{name:"Role (Discord role)",value:"Role"},{name:"Mentionable (user or role)",value:"Mentionable"},{name:"Attachment (file)",value:"Attachment"}]},{type:"input",name:"name",message:'Option name (e.g., "user", "reason", "amount"):',validate:e=>!!/^[a-z0-9-]+$/.test(e)||"Option name must be lowercase and may only contain letters, numbers, and dashes"},{type:"input",name:"description",message:'Option description (e.g., "The user to ban", "Reason for the action"):',validate:e=>e.length>0},{type:"confirm",name:"required",message:"Is this option required?",default:!1}]);t.push({type:n.type.toLowerCase(),name:n.name,description:n.description,required:n.required});const{addAnother:a}=await inquirer.prompt([{type:"confirm",name:"addAnother",message:"Would you like to add another option?",default:!1}]);a||(e=!1)}}let o=[];if(a.features.includes("permissions")){console.log("\nSelect the permissions required to use this command:"),console.log("(Use space to select/deselect, arrow keys to move, enter to confirm)\n");o=(await inquirer.prompt([{type:"checkbox",name:"permissions",message:"Required permissions:",choices:[{name:"Administrator - Full access to all commands",value:"Administrator"},{name:"Manage Server - Edit server settings",value:"ManageGuild"},{name:"Manage Messages - Delete/pin messages",value:"ManageMessages"},{name:"Manage Channels - Edit channel settings",value:"ManageChannels"},{name:"Kick Members - Remove members from server",value:"KickMembers"},{name:"Ban Members - Permanently remove members",value:"BanMembers"},{name:"Send Messages - Write in text channels",value:"SendMessages"},{name:"Embed Links - Send embedded content",value:"EmbedLinks"},{name:"Attach Files - Upload files",value:"AttachFiles"},{name:"Read Message History - View old messages",value:"ReadMessageHistory"},{name:"Mention Everyone - Use @everyone/@here",value:"MentionEveryone"}]}])).permissions}let r="import { SlashCommandBuilder";o.length>0&&(r+=", PermissionFlagsBits"),r+=" } from 'discord.js';\n",a.features.includes("cacheable")&&(r+="import { commandCache } from '../utils/commandCache.js';\n\n",r+=`// Set command-specific cache settings\ncommandCache.setCommandSettings('${a.name}', {\n  ttl: 60000, // Cache results for 1 minute\n});\n\n`),r+="export default {\n",r+="  data: new SlashCommandBuilder()\n",r+=`    .setName('${a.name}')\n`,r+=`    .setDescription('${a.description}')\n`,t.length>0&&t.forEach((e=>{r+=`    .add${e.type.charAt(0).toUpperCase()+e.type.slice(1)}Option(option =>\n`,r+="      option\n",r+=`        .setName('${e.name}')\n`,r+=`        .setDescription('${e.description}')\n`,r+=`        .setRequired(${e.required})\n`,r+="    )\n"})),o.length>0&&o.forEach((e=>{r+=`    .setDefaultMemberPermissions(PermissionFlagsBits.${e})\n`})),r+="  ,\n\n",a.features.includes("cacheable")&&(r+="  cacheable: true,\n\n"),r+="  async execute(interaction) {\n",a.features.includes("deferred")&&(r+=`    await interaction.deferReply(${a.features.includes("ephemeral")?"{ ephemeral: true }":""});\n\n`),t.length>0&&(r+="    // Get command options\n",t.forEach((e=>{r+=`    const ${e.name} = interaction.options.get${e.type.charAt(0).toUpperCase()+e.type.slice(1)}('${e.name}');\n`})),r+="\n"),r+="    // TODO: Add your command logic here\n\n",a.features.includes("deferred")?r+=`    await interaction.editReply({ content: 'Command executed!' ${a.features.includes("ephemeral")?", ephemeral: true":""} });\n`:r+=`    await interaction.reply({ content: 'Command executed!' ${a.features.includes("ephemeral")?", ephemeral: true":""} });\n`,r+="  },\n",r+="};\n";const i=process.cwd(),m=path.join(i,"src","commands");fs.existsSync(m)||fs.mkdirSync(m,{recursive:!0});const c=path.join(m,`${a.name}.js`);return fs.writeFileSync(c,r),success(`Command ${a.name} created successfully at ${c}`),{name:a.name,path:c,features:a.features,options:t}}generateCommand().catch((e=>{error("Error creating command:",e),process.exit(1)}));