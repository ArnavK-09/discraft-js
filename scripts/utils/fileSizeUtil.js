import fs from"fs";import path from"path";import{info,success}from"../../common/utils/logger.js";export function formatBytes(bytes){if(0===bytes)return"0 Bytes";const i=Math.floor(Math.log(bytes)/Math.log(1024));return parseFloat((bytes/Math.pow(1024,i)).toFixed(2))+" "+["Bytes","KB","MB","GB"][i]}export async function getFileSizes(dir){const files=await fs.promises.readdir(dir,{withFileTypes:!0});let totalSize=0;for(const file of files){const fullPath=path.join(dir,file.name);if(file.isDirectory())totalSize+=await getFileSizes(fullPath);else if(file.name.endsWith(".js")){totalSize+=(await fs.promises.stat(fullPath)).size}}return totalSize}export async function displaySizeComparison(srcSize,distPath){const bundlePath=path.join(distPath,"bundle.js"),bundleSize=fs.existsSync(bundlePath)?(await fs.promises.stat(bundlePath)).size:0,reduction=srcSize>0?((srcSize-bundleSize)/srcSize*100).toFixed(1):0;info("\nBuild Statistics:"),info("================"),info("Source Files:"),info(`  Original Size: ${formatBytes(srcSize)}`),info("\nBundle:"),info(`  Final Size: ${formatBytes(bundleSize)}`),info(`  Size Reduction: ${reduction}%\n`),success("\nTotal Results:"),success(`Original Size: ${formatBytes(srcSize)}`),success(`Final Size  : ${formatBytes(bundleSize)}`),success(`Total Saved : ${reduction}%`)}